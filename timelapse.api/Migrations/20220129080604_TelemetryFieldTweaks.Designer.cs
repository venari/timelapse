// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using timelapse.infrastructure;

#nullable disable

namespace timelapse.api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220129080604_TelemetryFieldTweaks")]
    partial class TelemetryFieldTweaks
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("timelapse.core.models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_devices");

                    b.ToTable("devices", (string)null);
                });

            modelBuilder.Entity("timelapse.core.models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BlobUri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("blob_uri");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_images");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_images_device_id");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("timelapse.core.models.Telemetry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BatteryPercent")
                        .HasColumnType("integer")
                        .HasColumnName("battery_percent");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<int?>("DiskSpaceFree")
                        .HasColumnType("integer")
                        .HasColumnName("disk_space_free");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("integer")
                        .HasColumnName("temperature_c");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int?>("UptimeSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("uptime_seconds");

                    b.HasKey("Id")
                        .HasName("pk_telemetry");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_telemetry_device_id");

                    b.ToTable("telemetry", (string)null);
                });

            modelBuilder.Entity("timelapse.core.models.Image", b =>
                {
                    b.HasOne("timelapse.core.models.Device", "Device")
                        .WithMany("Images")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_images_devices_device_id");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("timelapse.core.models.Telemetry", b =>
                {
                    b.HasOne("timelapse.core.models.Device", "Device")
                        .WithMany("Telemetries")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_telemetry_devices_device_id");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("timelapse.core.models.Device", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Telemetries");
                });
#pragma warning restore 612, 618
        }
    }
}
