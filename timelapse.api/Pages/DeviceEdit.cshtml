@page "{id:int}"
@model DeviceEditModel

@{
    ViewData["Title"] = "Edit";
}

<script src="https://unpkg.com/leaflet@1.9.2/dist/leaflet.js"
    integrity="sha256-o9N1jGDZrf5tS+Ft4gbIK7mYMipq9lqpVJ91xHSyKhg="
    crossorigin=""></script>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.79.0/dist/L.Control.Locate.min.css" />
<script src="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.79.0/dist/L.Control.Locate.min.js" charset="utf-8"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.2/leaflet.css"

<h1>Create</h1>

<h4>Device</h4>
<hr />
<div class="row">
    <div class="col-md-12">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Device.SerialNumber" class="control-label"></label>
                <input asp-for="Device.SerialNumber" class="form-control" readonly/>
            </div>
            <div class="form-group">
                <label asp-for="Device.Name" class="control-label"></label>
                <input asp-for="Device.Name" class="form-control" />
                <span asp-validation-for="Device.Name" class="text-danger"></span>
            </div>
            <div class="form-group" class="col-md-12">
                <label asp-for="Device.Description" class="control-label"></label>
                <textarea asp-for="Device.Description" class="form-control" rows="3"></textarea>
                <span asp-validation-for="Device.Description" class="text-danger"></span>
            </div>
            <div class="form-check" class="col-md-12">
                <input asp-for="Device.SupportMode" class="form-check-input" type="checkbox">
                <label class="form-check-label" asp-for="Device.SupportMode">
                    Support Mode
                </label>
            </div>
            <div class="form-check" class="col-md-12">
                <input asp-for="Device.MonitoringMode" class="form-check-input" type="checkbox">
                <label class="form-check-label" asp-for="Device.MonitoringMode">
                    Monitoring Mode
                </label>
            </div>
            <div class="form-check" class="col-md-12">
                <input asp-for="Device.HibernateMode" class="form-check-input" type="checkbox">
                <label class="form-check-label" asp-for="Device.HibernateMode">
                    Hibernate Mode
                </label>
            </div>
            <div class="form-check" class="col-md-12">
                <input asp-for="Device.WideAngle" class="form-check-input" type="checkbox">
                <label class="form-check-label" asp-for="Device.WideAngle">
                    WideAngle
                </label>
            </div>
            <div class="form-check" class="col-md-12">
                <input asp-for="Device.Service" class="form-check-input" type="checkbox">
                <label class="form-check-label" asp-for="Device.Service">
                    Service
                </label>
            </div>
            <div class="form-check" class="col-md-12">
                <input asp-for="Device.Retired" class="form-check-input" type="checkbox">
                <label class="form-check-label" asp-for="Device.Retired">
                    Retired
                </label>
            </div>


            <div class="form-check" class="col-md-12">
                <input asp-for="LocationMoved" class="form-check-input" type="checkbox"></input>
                <label class="form-check-label" asp-for="LocationMoved">
                    New Location
                </label>
            </div>

            <div class="form-group" class="col-md-12">
                <label asp-for="LocationDescription" class="control-label"></label>
                <textarea asp-for="LocationDescription" class="form-control" rows="3"></textarea>
                <span asp-validation-for="LocationDescription" class="text-danger"></span>
            </div>

            <div class="form-group" class="col-md-4">
                <label asp-for="Latitude" class="control-label"></label>
                <input asp-for="Latitude" class="form-control"></input>
                <span asp-validation-for="Latitude" class="text-danger"></span>
            </div>

            <div class="form-group" class="col-md-4">
                <label asp-for="Longitude" class="control-label"></label>
                <input asp-for="Longitude" class="form-control"></input>
                <span asp-validation-for="Longitude" class="text-danger"></span>
            </div>

            <div class="form-group" class="col-md-4">
                <label asp-for="Heading" class="control-label"></label>
                <input asp-for="Heading" class="form-control"></input>
                <span asp-validation-for="Heading" class="text-danger"></span>
            </div>

            <div class="form-group" class="col-md-4">
                <label asp-for="Pitch" class="control-label"></label>
                <input asp-for="Pitch" class="form-control"></input>
                <span asp-validation-for="Pitch" class="text-danger"></span>
            </div>

            <div class="form-group" class="col-md-4">
                <label asp-for="HeightMM" class="control-label"></label>
                <input asp-for="HeightMM" class="form-control"></input>
                <span asp-validation-for="HeightMM" class="text-danger"></span>
            </div>


            <div class="form-group" class="col-md-12">
                <div id="map"></div>
            </div>


            <div class="form-group">
                <input type="submit" value="Update" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-page="Index">Back to List</a>
</div>

<script>
    var map = L.map('map');

    var aerial = L.tileLayer('@(Model.BasemapURL)', {
        maxZoom: 21
    });//.addTo(map);

    var osm = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 21,
        attribution: '© OpenStreetMap'
    }).addTo(map);

    var baseMaps = {
        "OpenStreetMap": osm,
        "Aerial": aerial
    };

    var layerControl = L.control.layers(baseMaps).addTo(map);

    var lat = document.getElementById("Latitude").value;
    var lon = document.getElementById("Longitude").value;

    if(lat!="" && lon!=""){
        map.setView([lat, lon], 17);
    }
    else{
        map.setView([-41.288889, 174.777222], 5);
    }

    updateMapPin()

    L.control.locate().addTo(map);

    var credits = L.control.attribution().addTo(map); credits.addAttribution('© <a href="//www.linz.govt.nz/linz-copyright">LINZ CC BY 4.0</a> © <a href="//www.linz.govt.nz/data/linz-data/linz-basemaps/data-attribution">Imagery Basemap contributors</a>');

    @* var mymap = L.map('map').setView([51.505, -0.09], 13);

    L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpandmbXliNDBjZWd2M2x6bDk3c2ZtOTkifQ._QA7i5Mpkd_m30IGElHziw', {
        maxZoom: 18,
        attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
                    '<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
                    'Imagery © <a href="http://mapbox.com">Mapbox</a>',
        id: 'mapbox.streets'
    }).addTo(mymap); *@

    // If user clicks map, add location to map, and update Latitude and Longitude fields
    map.on('click', function (e) {
        var lat = e.latlng.lat;
        var lon = e.latlng.lng;
        console.log("You clicked the map at LAT: " + lat + " and LONG: " + lon);
        document.getElementById("Latitude").value = lat.toFixed(6);
        document.getElementById("Longitude").value = lon.toFixed(6);
        updateMapPin();

    });

    // If user updates Latitude or Longitude fields, update map
    document.getElementById("Latitude").addEventListener("input", updateMapPin);
    document.getElementById("Longitude").addEventListener("input", updateMapPin);
    document.getElementById("Heading").addEventListener("input", updateMapPin);
    document.getElementById("Device_WideAngle").addEventListener("input", updateMapPin);

    function updateMapPin() {
        var lat = document.getElementById("Latitude").value;
        var lon = document.getElementById("Longitude").value;
        var wide = document.getElementById("Device_WideAngle").checked;

        if(lat=="" || lon==""){
            return;
        }

        console.log("You updated the Latitude to: " + lat + " and Longitude to: " + lon);

        // Clear any old markers
        map.eachLayer(function (layer) {
            if (layer instanceof L.Marker || layer instanceof L.Polygon) {
                map.removeLayer(layer);
            }
        });

        // Add marker to map
        var marker = L.marker([lat, lon]).addTo(map);

        // Add triangle to map, standing on marker, pointing in direction of Heading
        var heading = document.getElementById("Heading").value;
        var pitch = document.getElementById("Pitch").value;
        var height = document.getElementById("HeightMM").value;

        if(heading!=""){

            // Convert heading to radians

            heading = parseFloat(heading);
            var headingRad = heading * Math.PI / 180;

            // Define the radius of the circle that would circumscribe the triangle
            var radius = 0.00001; // This can be any value
            lat = parseFloat(lat);
            lon = parseFloat(lon);            

            var fov = 75;

            if(wide){
                fov = 120;
            }

            var angles = [-(fov/2), fov/2];

            console.log(heading)

            // Calculate the coordinates of the three vertices of the triangle
            var vertices = angles.map(angle => {
                // Convert angle to radians and add to heading
                var rad = (angle + heading) * Math.PI / 180;

                // Calculate change in coordinates
                var dLat = radius * Math.cos(rad);
                var dLon = radius * Math.sin(rad) / Math.cos(lat * Math.PI / 180);

                // Convert to degrees and add to original coordinates
                return [lat + dLat * 180 / Math.PI, lon + dLon * 180 / Math.PI];
            });

            // Finish the triangle at original point
            vertices.push([lat, lon])

            var triangle = L.polygon(vertices).addTo(map);

            // vertices now contains the coordinates of the three vertices of the triangle
            
            triangle.setStyle({
                color: 'red',
                fillColor: 'red',
                fillOpacity: 0.5
            });

        }

        if(map.getZoom() < 15){
            map.setZoom(15);
        }
        map.panTo([lat, lon]);
    }
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
