@* @page "{deviceId:int}/{initialDateTime:datetime}" *@
@* @page "{deviceId:int}/{initialDateTime:int}" *@
@page "{imageId:int}"
@using Humanizer
@model Events.CreateModel
@{
    ViewData["Title"] = "Create Event";
}

<h1>Create</h1>

<h4>Event</h4>
<hr />

<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="device.Description" class="control-label">Device Description</label>
                <input readonly asp-for="device.Description" class="form-control" />
                <span asp-validation-for="device.Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <button title="Event Start" onclick="eventStart()" type="button" class="btn btn-primary"><i class="fa fa-flag"></i></button>
                <label asp-for="StartTime" class="control-label"></label>
                <input type="datetime-local" id="eventStartDateTime" step="1" asp-for="StartTime" class="form-control" />
                <span asp-validation-for="StartTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <button title="Event End"onclick="eventEnd()" type="button" class="btn btn-primary"><i class="fa fa-flag-checkered"></i></button>
                <label asp-for="EndTime" class="control-label"></label>
                <input type="datetime-local" id="eventEndDateTime" step="1" asp-for="EndTime" class="form-control" />
                <span asp-validation-for="EndTime" class="text-danger"></span>
            </div>
            <!-- Create a drop down that gives all options from EventType collection
             -->
            <div class="form-group">
                <label asp-for="SelectedEventTypeId" class="control-label">Event Type</label>
                <select asp-for="SelectedEventTypeId" class="form-control" asp-items="Model.EventTypes">
                    <option value=""></option>
                </select>
                <span asp-validation-for="SelectedEventTypeId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label">Event Description</label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

@* <div class="text-center">
    <h1 class="display-4">@(Model.device.Description)</h1>
    </p>
</div>

<div class="container">
  <div class="row">
  </div>
</div> *@



<div>
    <table class="table">
        <thead>
        </thead>
        <tbody>
            <tr>
                <td>
                    <p id="imageHeader" scope="col">Image for @(Model.device.Name) as at ...</p>

                    @if(Model.device.LatestImage!=null){
                        <img class="img-fluid" id="image" src="@(Model.device.LatestImage.BlobUri + Model.SasToken)"></img>
                    }
                </td>
            @* </tr>
                <button title="Event Start" onclick="eventStart()" type="button" class="btn btn-primary"><i class="fa fa-flag"></i></button>
                <label for="eventStartDateTime">Event Start:</label>
                <input type="datetime-local" id="eventStartDateTime" name="eventStartDateTime"> 
            <tr> *@
            </tr>
            @* <tr>
                <button title="Event End"onclick="eventEnd()" type="button" class="btn btn-primary"><i class="fa fa-flag-checkered"></i></button>
                <label for="eventEndDateTime">Event End:</label>
                <input type="datetime-local" id="eventEndDateTime" name="eventEndDateTime"> 
            </tr> *@
            <tr>
                @* <label id="imageDateSliderValue"></label> *@
                @* <input type="range" class="form-range" min="0" max="@(Model.imagesLast24Hours.Count() - 1)" value="@(Model.imagesLast24Hours.Count() - 1)" id="imageDateSlider"> *@
                @* <button id="togglePlay" onclick="togglePlay()" type="button" class="btn btn-primary"><i class="fa fa-play"></i></button> *@
                <button title="Back 1hr" onclick="navigate(-60)" type="button" class="btn btn-secondary"><i class="fa fa-fast-backward"></i></button>
                <button title="Back 10m"onclick="navigate(-10)" type="button" class="btn btn-secondary"><i class="fa fa-backward"></i></button>
                <button title="Back 1m"onclick="navigate(-1)" type="button" class="btn btn-secondary"><i class="fa fa-step-backward"></i></button>
                <button id="togglePlay" onclick="togglePlay()" type="button" class="btn btn-secondary"><i class="fa fa-play"></i></button>
                <button title="Forward 1m"onclick="navigate(1)" type="button" class="btn btn-secondary"><i class="fa fa-step-forward"></i></button>
                <button title="Forward 10m"onclick="navigate(10)" type="button" class="btn btn-secondary"><i class="fa fa-forward"></i></button>
                <button title="Forward 1hr"onclick="navigate(60)" type="button" class="btn btn-secondary"><i class="fa fa-fast-forward"></i></button>
                <label for="jumpToDateTime">Jump to (date and time):</label>
                <input onchange="jumpToDateTime()" type="datetime-local" id="jumpToDateTime" name="jumpToDateTime"> 
            </tr>
        </tbody>
    </table>
</div>

<script>
    var currentViewedTimestamp = '@(Model.InitialTimestamp.ToString("o"))'
    document.getElementById("eventStartDateTime").value = ISO8601UTCDatetimeToLocalDatetime('@(Model.StartTime.ToUniversalTime().ToString("o"))');
    document.getElementById("eventEndDateTime").value = ISO8601UTCDatetimeToLocalDatetime('@(Model.EndTime.ToUniversalTime().ToString("o"))');
        
    displayCurrentViewedTimestamp();

    // Sort out timezone of start and end. asp-for messes it up.

    console.log("Initial timestamp: " + currentViewedTimestamp)

    var image = document.getElementById("image")

    var bPlaying=false

    var togglePlayButton = document.getElementById("togglePlay")

    function togglePlay(){
        bPlaying=!bPlaying;
        if(bPlaying){
            togglePlayButton.innerHTML = '<i class="fa fa-pause"></i>'

            nextFrame();
            @* play() *@
        }
        else{
            togglePlayButton.innerHTML = '<i class="fa fa-play"></i>'
            @* stop() *@
        }
    }

    function displayCurrentViewedTimestamp()
    {
        var imageHeader = document.getElementById("imageHeader");
        imageHeader.innerHTML = "Image for @(Model.device.Name) as at " + localizeDateTimeAsString(currentViewedTimestamp)

        document.getElementById("jumpToDateTime").value = ISO8601UTCDatetimeToLocalDatetime(currentViewedTimestamp);
    }
    function eventStart(){
        document.getElementById("eventStartDateTime").value = ISO8601UTCDatetimeToLocalDatetime(currentViewedTimestamp);
    }

    function eventEnd(){
        document.getElementById("eventEndDateTime").value = ISO8601UTCDatetimeToLocalDatetime(currentViewedTimestamp);
    }

    function navigate(minutes){
        var newTimestamp = new Date(new Date(currentViewedTimestamp).getTime() + minutes * 60 * 1000)

        console.log("Navigating " + minutes + " minutes from " + new Date(currentViewedTimestamp) + " to " + newTimestamp)

        getImageAtOrAround(@(Model.device.Id), ISO8601UTCDatetimeToLocalDatetime(newTimestamp.toISOString()), minutes>0)
    }

    function jumpToDateTime(){
        var jumpToDateTime = document.getElementById("jumpToDateTime").value
        getImageAtOrAround(@(Model.device.Id), jumpToDateTime, true)
    }

    function getImage(deviceId, imageIndex) {
        imageBlobUri = last24HoursImages[imageIndex].blobUri + '@(Model.SasToken)'.replace(/&amp;/g, '&')
        image.src = imageBlobUri
        var imageHeader = document.getElementById("imageHeader");
        imageHeader.innerHTML = "Image for @(Model.device.Name) as at " + localizeDateTimeAsString(last24HoursImages[imageIndex].timestamp)
    }

    function getImageAtOrAround(deviceId, atOrAfterTimestamp, forwards) {

        console.log("Navigating to or around " + atOrAfterTimestamp)

        var url = "/api/Image/GetImageAtOrAround/?deviceId=" + deviceId + "&timestamp=" + atOrAfterTimestamp + "&forwards=" + forwards
        fetch(url, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(function(response){
            if(response.ok){
                return response.json()
            } else {
                console.error('Something went wrong');
            }
        })
        .then(function(data){
            console.log(data.blobUri)
            console.log(data.timestamp)

            image.src = data.blobUri + '@(Model.SasToken)'.replace(/&amp;/g, '&')

            currentViewedTimestamp = data.timestamp
            displayCurrentViewedTimestamp()
        });
    }
</script>