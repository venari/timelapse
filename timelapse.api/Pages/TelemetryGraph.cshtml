@page "{id:int}/{numberOfHoursToDisplay:int?}"
@using Humanizer
@model TelemetryGraphModel
@{
    ViewData["Title"] = "Telemetry Graph";
}

<script>
    function localize(t)
    {
        var d=new Date(t+" UTC");
        document.write(d.toLocaleString());
    }

    function localizeDate(t)
    {
        var d=new Date(t);
        return d.toLocaleString();
    }
</script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>

<h4>Displaying @(Model.NumberOfHoursToDisplay) hours data.</h4>
@{
    <a href="/TelemetryGraph/@(Model.device.Id)/1" type="button" class="btn btn-secondary">Last hour</a>
    <a href="/TelemetryGraph/@(Model.device.Id)/24" type="button" class="btn btn-secondary">Last 24 hours</a>
    <a href="/TelemetryGraph/@(Model.device.Id)/48" type="button" class="btn btn-secondary">Last 48 hours</a>
}


<script>
    const latest24HoursTelemetryUri = '/api/Telemetry/GetLatestTelemetry'

    function getTelemetry(deviceId, numberOfHoursToDisplay, chart) {
        fetch(latest24HoursTelemetryUri + '?deviceId=' + deviceId + '&numberOfHoursToDisplay=' + numberOfHoursToDisplay)
            .then(response => response.json())
            .then(data => showTelemetry(chart, data))
            .catch(error => console.error('Unable to get telemetry.', error));
    }

    function showTelemetry(chart, data){
        console.log("showTelemtery");
        console.log(data)
        chart.config.data.datasets[0].data = data.map(d => ({x: new Date(d.timestamp), y: d.batteryPercent}));
        chart.config.data.datasets[1].data = data.map(d => ({x: new Date(d.timestamp), y: d.temperatureC}));
        chart.config.data.datasets[2].data = data.map(d => ({x: new Date(d.timestamp), y: d.diskSpaceFree}));        
        chart.config.data.datasets[3].data = data.map(d => ({x: new Date(d.timestamp), y: d.pendingImages}));        
        chart.config.data.datasets[4].data = data.map(d => ({x: new Date(d.timestamp), y: d.pendingTelemetry}));        
        chart.update();
    }
</script>

<div>
    <table class="table">
        <thead>
            <tr>
            <th scope="col">Latest Telemetry for @(Model.device.Name) as at <script type="text/javascript">localize('@(Model.device.LatestTelemetryTimestamp)');</script>
            @if (Model.device.LatestTelemetry!=null && DateTime.UtcNow - Model.device.LatestTelemetry.Timestamp > TimeSpan.FromMinutes(15)){
                <span class="badge bg-warning text-dark">Warning - @((DateTime.UtcNow - Model.device.LatestTelemetry.Timestamp).Humanize()) old</span>
            }
            </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <canvas id="myChart_@(Model.device.Id)"></canvas>

                    <script>

                        var config = {
                            type: 'line',
                            options: {
                                plugins: {
                                    legend: {
                                        @* display: false, *@
                                    }
                                },
                                scales: {
                                    x: {
                                            parsing: false,
                                            @* display: false, *@
                                            type: 'time',
                                            time: {
                                                unit: 'hour'
                                            },
                                            suggestedMin: new Date(@(new DateTimeOffset(Model.device.LatestTelemetry.Timestamp).AddHours(-1 * Model.NumberOfHoursToDisplay).ToUnixTimeMilliseconds())),
                                            @* suggestedMax: new Date(), *@
                                            suggestedMax: new Date(@(new DateTimeOffset(Model.device.LatestTelemetry.Timestamp).ToUnixTimeMilliseconds())),
                                            @* ticks: {
                                                max: new Date(),
                                                min: new Date(@(new DateTimeOffset(Model.device.LatestTelemetry.Timestamp).AddDays(-2).ToUnixTimeMilliseconds())),
                                            } *@
                                    },
                                    y: {
                                            @* display: false, *@
                                            beginAtZero: true
                                    }
                                },
                                elements: {
                                    line: {
                                        borderColor: '#000000',
                                        borderWidth: 1
                                    },
                                        point: {
                                            radius: 2 
                                    } 
                                },
                                animation: false
                                @* responsive: false, *@
                            }
                        };

                        data = {
                            @* labels: labels, *@
                            datasets: [{
                                label: "Battery",
                                backgroundColor: 'rgb(99, 99, 255)',
                                borderColor: 'rgb(99, 99, 255)',
                            }, {
                                label: "Temperature",
                                backgroundColor: 'rgb(255, 99, 132)',
                                borderColor: 'rgb(255, 99, 132)',
                            }, {
                                label: "Disk Space Free",
                                backgroundColor: 'rgb(50, 225, 50)',
                                borderColor: 'rgb(50, 225, 50)',
                            }, {
                                label: "Pending Images",
                                backgroundColor: 'rgb(30, 185, 00)',
                                borderColor: 'rgb(30, 185, 00)',
                            }, {
                                label: "Pending Telemetry",
                                backgroundColor: 'rgb(00, 165, 20)',
                                borderColor: 'rgb(00, 165, 20)',
                            }]
                        };

                        config.data=data;

                        const myChart_@(Model.device.Id) = new Chart(
                            document.getElementById('myChart_@(Model.device.Id)'),
                            config
                        );

                        getTelemetry(@(Model.device.Id), @(Model.NumberOfHoursToDisplay), myChart_@(Model.device.Id));

                    </script>
                </td>
            </tr>
        </tbody>
    </table>
</div>
