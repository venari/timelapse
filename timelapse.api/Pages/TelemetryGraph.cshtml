@page "{id:int}/{numberOfHoursToDisplay:int?}/{periodOffset:int?}"
@using Humanizer
@model TelemetryGraphModel
@{
    ViewData["Title"] = "Telemetry Graph";
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@2.0.1/dist/chartjs-plugin-annotation.min.js"></script>

<div class="text-center">
    <h1 class="display-4">
        @(Model.device.Description)
    </h1>
</div>

<div class="container">
  <div class="row">
    <div class="col">
        <h4>Displaying @(Model.NumberOfHoursToDisplay) hours data.</h4>
        @{
            <a href="/TelemetryGraph/@(Model.device.Id)/@(Model.NumberOfHoursToDisplay)/@(Model.PeriodOffset+1)" type="button" class="btn btn-secondary">Previous</a>
            <a href="/TelemetryGraph/@(Model.device.Id)/1" type="button" class="btn btn-secondary">Last hour</a>
            <a href="/TelemetryGraph/@(Model.device.Id)/24" type="button" class="btn btn-secondary">Last 24 hours</a>
            <a href="/TelemetryGraph/@(Model.device.Id)/48" type="button" class="btn btn-secondary">Last 48 hours</a>
            <a href="/TelemetryGraph/@(Model.device.Id)/168" type="button" class="btn btn-secondary">Last week</a>
            @if(Model.PeriodOffset>0){
                <a href="/TelemetryGraph/@(Model.device.Id)/@(Model.NumberOfHoursToDisplay)/@(Model.PeriodOffset-1)" type="button" class="btn btn-secondary">Next</a>
            }
        }
    </div>
    <div class="col">
        <div class="float-end">
            @if(Model.device.LatestImage!=null){
                <a href="/ImageView/@(Model.device.Id)"><img class="img-thumbnail" src="@(Model.device.LatestImage.BlobUri + Model.SasToken)" width=100></img></a>
            }
            @if (Model.device.LatestImage!=null && DateTime.UtcNow - Model.device.LatestImage.Timestamp > TimeSpan.FromMinutes(60)){
                <span class="badge bg-warning text-dark">Warning - @((DateTime.UtcNow - Model.device.LatestImage.Timestamp).Humanize()) old</span>
            }
        </div>
    </div>
  </div>
</div>



<script>
    const latest24HoursTelemetryUri = '/api/Telemetry/GetTelemetry'

    function getTelemetry(deviceId, numberOfHoursToDisplay, periodOffset, chart) {
        fetch(latest24HoursTelemetryUri + '?deviceId=' + deviceId + '&numberOfHoursToDisplay=' + numberOfHoursToDisplay + '&periodOffset=' + periodOffset)
            .then(response => response.json())
            .then(data => showTelemetry(chart, data))
            .catch(error => console.error('Unable to get telemetry.', error));
    }

    function showTelemetry(chart, data){

        const minVoltage = 2000
        const maxVoltage = 3600

        console.log("showTelemtery");
        @* console.log(data) *@

        var lastIndex = 0;

        var lastBatteryPercent = data[0].batteryPercent;
        var lastTimestamp =  new Date(data[0].timestamp);
        data.forEach(function(d, i) {
            if(i==0){
                return;
            }
            var timeDifference = new Date(d.timestamp) - lastTimestamp;
            var hoursDifference = timeDifference / 1000 / 60 / 60;
            var batteryPercentDifference = d.batteryPercent - lastBatteryPercent;
            // Work out battery percent, but cap to remove unreal bounces.
            if(hoursDifference>=0.5){
                d.batteryPercentPerHour = Math.min(60, Math.max(-50, batteryPercentDifference / hoursDifference));
            }

            while(hoursDifference>1){
                ++lastIndex;
                lastBatteryPercent = data[lastIndex].batteryPercent;
                lastTimestamp = new Date(data[lastIndex].timestamp);
                timeDifference = new Date(d.timestamp) - lastTimestamp;
                hoursDifference = timeDifference / 1000 / 60 / 60;
            }

            @* // Make sure there's an over 2% difference between readings to help smooth things out, and at least 1 hourand no more than 6 hours between readings

            if(hoursDifference > 1 && Math.abs(batteryPercentDifference) > 2){
                ++lastIndex;
                lastBatteryPercent = data[lastIndex].batteryPercent;
                lastTimestamp = new Date(data[lastIndex].timestamp);
            } else {
                while(hoursDifference>6){
                    ++lastIndex;
                    lastBatteryPercent = data[lastIndex].batteryPercent;
                    lastTimestamp = new Date(data[lastIndex].timestamp);
                    hoursDifference = new Date(d.timestamp) - lastTimestamp;
                    hoursDifference = hoursDifference / 1000 / 60 / 60;
                }

            } *@
        });

        chart.config.data.datasets[0].data = data.map(d => ({x: new Date(d.timestamp), y: d.batteryPercent}));
        chart.config.data.datasets[1].data = data.map(d => ({x: new Date(d.timestamp), y: d.temperatureC}));
        chart.config.data.datasets[2].data = data.map(d => ({x: new Date(d.timestamp), y: d.diskSpaceFree}));        
        chart.config.data.datasets[3].data = data.map(d => ({x: new Date(d.timestamp), y: d.pendingImages}));        
        chart.config.data.datasets[4].data = data.map(d => ({x: new Date(d.timestamp), y: d.pendingTelemetry}));        
        @* chart.config.data.datasets[5].data = data.map(d => ({x: new Date(d.timestamp), y: Math.max(0, (d.batteryVoltage - minVoltage)/(maxVoltage - minVoltage) * 100)})); *@
        chart.config.data.datasets[5].data = data.map(d => ({x: new Date(d.timestamp), y: d.batteryVoltage}));
        chart.config.data.datasets[6].data = data.map(d => ({x: new Date(d.timestamp), y: d.batteryCurrent}));
        chart.config.data.datasets[7].data = data.map(d => ({x: new Date(d.timestamp), y: d.ioVoltage}));
        chart.config.data.datasets[8].data = data.map(d => ({x: new Date(d.timestamp), y: d.ioCurrent}));
        chart.config.data.datasets[9].data = data.map(d => ({x: new Date(d.timestamp), y: d.charging}));        
        chart.config.data.datasets[10].data = data.map(d => ({x: new Date(d.timestamp), y: d.batteryPercentPerHour}));
        chart.config.data.datasets[11].data = data.map(d => ({x: new Date(d.timestamp), y: d.uptimeSeconds/60}));
        chart.update();
    }

    var dates = [];

    var daysToDisplay = @(Model.NumberOfHoursToDisplay)/24;
    @* var dateTo = new Date(@(Model.LatestTelemetryDateTime.Value.ToString("s")); *@
    var dateFrom = new Date("@(Model.TargetEarliestTelemetryDateTime.Value.ToString("s"))");
    // Move to midnight boundary
    dateFrom = new Date(dateFrom.getFullYear(), dateFrom.getMonth(), dateFrom.getDate());
    // Show day boundaries if 30 days or fewer - gets a bit heavy otherwise.
    if(daysToDisplay<=30){
        for(var dateIndex = 0; dateIndex <= daysToDisplay + 1; ++dateIndex){
            var date = new Date(dateFrom.getTime() + dateIndex * 24 * 60 * 60 * 1000);
            dates.push(date);
        }
    }

    annotations = dates
    .map((l, i) => ({
        drawTime: 'beforeDatasetsDraw',
        type: 'box',
        xScaleID: 'x',
        yScaleID: 'y',
        xMin: new Date(l.getFullYear(), l.getMonth(), l.getDate()),
        xMax: new Date(l.getFullYear(), l.getMonth(), l.getDate()+1),
        backgroundColor: 'rgba(128, 128, 128, 0.2)',
        borderColor: 'rgba(128, 128, 128, 0.0)',
        borderWidth: 1
    }))
    .filter((l, i) => !(i % 2))
</script>

<div>
    <table class="table">
        <thead>
            <tr>
                @if(Model.PeriodOffset>0){
                    <th scope="col">Telemetry for @(Model.device.Name) between <script type="text/javascript">localizeDateTime('@(Model.EarliestTelemetryDateTime.Value.ToString("s"))');</script> and <script type="text/javascript">localizeDateTime('@(Model.LatestTelemetryDateTime.Value.ToString("s"))');</script>                
                    </th>
                } else {
                    <th scope="col">Latest Telemetry for @(Model.device.Name) as at <script type="text/javascript">localizeDateTime('@(Model.LatestTelemetryDateTime.Value.ToString("s"))');</script>
                    @if (Model.device.LatestTelemetry!=null && DateTime.UtcNow - Model.device.LatestTelemetry.Timestamp > TimeSpan.FromMinutes(60)){
                        <span class="badge bg-warning text-dark">Warning - @((DateTime.UtcNow - Model.device.LatestTelemetry.Timestamp).Humanize()) old</span>
                    }
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <canvas id="myChart_@(Model.device.Id)"></canvas>

                    <script>

                        var config = {
                            type: 'line',
                            options: {
                                plugins: {
                                    legend: {
                                        @* display: false, *@
                                    },
                                    annotation: {
                                        annotations: annotations
                                    }
                                },
                                scales: {
                                    x: {
                                            parsing: false,
                                            @* display: false, *@
                                            type: 'time',
                                            time: {
                                                unit: 'hour',
                                                // https://date-fns.org/v2.28.0/docs/format
                                                displayFormats: {
                                                    'millisecond': 'MMM DD',
                                                    'second': 'MMM DD',
                                                    'minute': 'MMM DD',
                                                    'hour': 'E do ha',
                                                    'day': 'MMM dd HH:mm',
                                                    'week': 'MMM DD',
                                                    'month': 'MMM DD',
                                                    'quarter': 'MMM DD',
                                                    'year': 'MMM DD'
                                                }                        
                                            },
                                            min: new Date(@(new DateTimeOffset(Model.TargetEarliestTelemetryDateTime.Value).ToUnixTimeMilliseconds())),
                                            @* suggestedMax: new Date(), *@
                                            max: new Date(@(new DateTimeOffset(Model.TargetLatestTelemetryDateTime.Value).ToUnixTimeMilliseconds())),
                                            @* ticks: {
                                                max: new Date(),
                                                min: new Date(@(new DateTimeOffset(Model.device.LatestTelemetry.Timestamp).AddDays(-2).ToUnixTimeMilliseconds())),
                                            } *@
                                    },
                                    y: {
                                            @* display: false, *@
                                            beginAtZero: true,
                                            position: 'left'
                                    },
                                    y1: {
                                            @* display: false, *@
                                            beginAtZero: false,
                                            position: 'right'
                                    }
                                },
                                elements: {
                                    line: {
                                        borderColor: '#000000',
                                        borderWidth: 1
                                    },
                                        point: {
                                            radius: 2 
                                    } 
                                },
                                animation: false
                                @* responsive: false, *@
                            }
                        };

                        data = {
                            @* labels: labels, *@
                            datasets: [{
                                label: "Battery",
                                backgroundColor: 'rgb(99, 99, 255)',
                                borderColor: 'rgb(99, 99, 255)',
                                yAxisID: 'y',
                            }, {
                                label: "Temperature",
                                backgroundColor: 'rgb(255, 99, 132)',
                                borderColor: 'rgb(255, 99, 132)',
                                yAxisID: 'y',
                            }, {
                                label: "Disk Space Free",
                                backgroundColor: 'rgb(50, 225, 50)',
                                borderColor: 'rgb(50, 225, 50)',
                                hidden: true,
                                yAxisID: 'y',
                            }, {
                                label: "Pending Images",
                                backgroundColor: 'rgb(30, 185, 00)',
                                borderColor: 'rgb(30, 185, 00)',
                                hidden: true,
                                yAxisID: 'y',
                            }, {
                                label: "Pending Telemetry",
                                backgroundColor: 'rgb(00, 165, 20)',
                                borderColor: 'rgb(00, 165, 20)',
                                hidden: true,
                                yAxisID: 'y',
                            }, {
                                label: "Battery Voltage",
                                backgroundColor: 'rgb(99, 99, 255)',
                                borderColor: 'rgb(99, 99, 255)',
                                hidden: true,
                                yAxisID: 'y1',
                            }, {
                                label: "Battery Current",
                                backgroundColor: 'rgb(255, 80, 100)',
                                borderColor: 'rgb(255, 80, 100)',
                                hidden: true,
                                yAxisID: 'y1',
                            }, {
                                label: "IO Voltage",
                                backgroundColor: 'rgb(99, 99, 255)',
                                borderColor: 'rgb(99, 99, 255)',
                                hidden: true,
                                yAxisID: 'y1',
                            }, {
                                label: "IO Current",
                                backgroundColor: 'rgb(255, 80, 100)',
                                borderColor: 'rgb(255, 80, 100)',
                                hidden: true,
                                yAxisID: 'y1',
                            }, {
                                label: "Charging",
                                backgroundColor: 'rgb(00, 165, 20)',
                                borderColor: 'rgb(00, 165, 20)',
                                yAxisID: 'y',
                            }, {
                                label: "Battery %/hr",
                                backgroundColor: 'rgb(00, 165, 20)',
                                borderColor: 'rgb(00, 165, 20)',
                                hidden: true,
                                yAxisID: 'y',
                            }, {
                                label: "Uptime (minutes)",
                                backgroundColor: 'rgb(00, 00, 00)',
                                borderColor: 'rgb(00, 00, 00)',
                                hidden: true,
                                yAxisID: 'y',
                            }]
                        };

                        config.data=data;

                        const myChart_@(Model.device.Id) = new Chart(
                            document.getElementById('myChart_@(Model.device.Id)'),
                            config
                        );

                        getTelemetry(@(Model.device.Id), @(Model.NumberOfHoursToDisplay), @(Model.PeriodOffset), myChart_@(Model.device.Id));

                    </script>
                </td>
            </tr>
        </tbody>
    </table>
</div>
