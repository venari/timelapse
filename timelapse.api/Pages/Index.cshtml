@page
@using Humanizer
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
</div>

<script>
    const latest24HoursTelemetryUri = 'api/Telemetry/GetLatest24HoursTelemetry'

    function getTelemetry(deviceId, chart) {
        fetch(latest24HoursTelemetryUri + '?deviceId=' + deviceId)
            .then(response => response.json())
            .then(data => showTelemetry(chart, data))
            .catch(error => console.error('Unable to get telemetry.', error));
    }

    function showTelemetry(chart, data){
        console.log("showTelemtery");
        console.log(data)
        chart.config.data.datasets[0].data = data.map(d => ({x: new Date(d.timestamp), y: d.batteryPercent}));
        chart.config.data.datasets[1].data = data.map(d => ({x: new Date(d.timestamp), y: d.temperatureC}));
        chart.config.data.datasets[2].data = data.map(d => ({x: new Date(d.timestamp), y: d.diskSpaceFree}));        
        chart.update();
    }
</script>

<div>
    <table class="table">
        <thead>
            <tr>
            <th scope="col">Id</th>
            <th scope="col">Name</th>
            <th scope="col">Description</th>
            <th scope="col">Latest Telemetry</th>
            <th scope="col">Battery %</th>
            <th scope="col"></th>
            <th scope="col">Power</th>
            <th scope="col">Disk Space (GB)</th>
            <th scope="col">Uptime</th>
            <th scope="col"></th>
            <th scope="col">Temperature (C)</th>
            <th scope="col">Latest Image</th>
            <th scope="col"></th>
            @* <th scope="col"></th> *@
            </tr>
        </thead>
        <tbody>
                @foreach (var device in Model.devices){
                    <tr>
                        <td>
                            <a href="DeviceEdit/@(device.Id)">@(device.Id)</a>
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => device.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => device.Description)
                        </td>
                        <td>
                            @* @(device.LatestTelemetry!=null?device.LatestTelemetry.Timestamp:"---") *@
                            @* <script type="text/javascript">localize('@(device.LatestTelemetryTimestamp.HasValue?device.LatestTelemetryTimestamp.Value.ToString("s"):"---")')</script> *@
                            @if (device.LatestTelemetry!=null && DateTime.UtcNow - device.LatestTelemetry.Timestamp > TimeSpan.FromMinutes(60)){
                                <span class="badge bg-warning text-dark">Warning - @((DateTime.UtcNow - device.LatestTelemetry.Timestamp).Humanize()) old</span>
                            } else {
                                <span>@(device.LatestTelemetryTimestamp.HasValue?device.LatestTelemetryTimestamp.Humanize():"---")</span>
                                @* <span>@((DateTime.UtcNow - device.LatestTelemetry.Timestamp).Humanize()) ago</span> *@
                            }

                        </td>
                        @if(device.LatestTelemetry!=null){
                            <td>@(device.LatestTelemetry.BatteryPercent)</td>
                            <td>@(device.LatestTelemetry.Status_Battery)</td>
                            <td>@(device.LatestTelemetry.Status_PowerInput)</td>

                            <td>@(device.LatestTelemetry.DiskSpaceFree)</td>
                            @* <td>@(ByteSize.FromGigabytes(device.LatestTelemetry.DiskSpaceFree))</td> *@
                            <td>@(TimeSpan.FromSeconds(device.LatestTelemetry.UptimeSeconds.Value).Humanize())</td>

                        } else {
                            <td>-</td>
                            <td>-</td>
                            <td>-</td>
                            <td>-</td>
                            <td>-</td>
                        }
                        <td>
                        @if(device.LatestTelemetry!=null){

                            <a href="TelemetryGraph/@(device.Id)"><canvas id="myChart_@(device.Id)" width="100" height="50"></canvas></a>

                            <script>

                                var config = {
                                    type: 'line',
                                    options: {
                                        plugins: {
                                            legend: {
                                                display: false,
                                            }
                                        },
                                        scales: {
                                            x: {
                                                    parsing: false,
                                                    display: false,
                                                    type: 'time',
                                                    time: {
                                                        unit: 'hour'
                                                    },
                                                    suggestedMin: new Date(@(new DateTimeOffset(device.LatestTelemetry.Timestamp).AddDays(-2).ToUnixTimeMilliseconds())),
                                                    @* suggestedMax: new Date(), *@
                                                    suggestedMax: new Date(@(new DateTimeOffset(device.LatestTelemetry.Timestamp).ToUnixTimeMilliseconds())),
                                            },
                                            y: {
                                                    display: false,
                                                    beginAtZero: true
                                            }
                                        },
                                        elements: {
                                            line: {
                                                borderColor: '#000000',
                                                borderWidth: 1
                                            },
                                                point: {
                                                    radius: 0 
                                            } 
                                        },
                                        responsive: false,
                                        animation: false
                                    }
                                };

                                data = {
                                    @* labels: labels, *@
                                    datasets: [{
                                        backgroundColor: 'rgb(99, 99, 255)',
                                        borderColor: 'rgb(99, 99, 255)',
                                    }, {
                                        backgroundColor: 'rgb(255, 99, 132)',
                                        borderColor: 'rgb(255, 99, 132)',
                                    }, {
                                        label: "Disk Space Free",
                                        backgroundColor: 'rgb(50, 225, 50)',
                                        borderColor: 'rgb(50, 225, 50)',
                                    }]
                                };

                                config.data=data;

                                const myChart_@(device.Id) = new Chart(
                                    document.getElementById('myChart_@(device.Id)'),
                                    config
                                );

                                getTelemetry(@(device.Id), myChart_@(device.Id));

                            </script>
                        }
                        </td>
                        <td>
                            @(device.LatestTelemetry!=null?device.LatestTelemetry.TemperatureC:"-")
                        </td>
                        <td>
                            @* @(device.LatestImage!=null?device.LatestImage.Timestamp:"---") *@
                            @* <script type="text/javascript">localize('@(device.LatestImageTimestamp.HasValue?device.LatestImageTimestamp.Value.ToString("s"):"---")')</script> *@
                            <span>@(device.LatestImageTimestamp.HasValue?device.LatestImageTimestamp.Humanize():"---")</span>

                        </td>
                        <td>
                            @if(device.LatestImage!=null){
                                <a href="ImageView/@(device.Id)"><img class="img-thumbnail" src="@(device.LatestImage.BlobUri + Model.SasToken)" width=100></img></a>
                                @if (device.LatestImage!=null && DateTime.UtcNow - device.LatestImage.Timestamp > TimeSpan.FromMinutes(60)){
                                    <span class="badge bg-warning text-dark">Warning - @((DateTime.UtcNow - device.LatestImage.Timestamp).Humanize()) old</span>
                                }
                            }
                        </td>
                        @* <td>
                            @Html.ActionLink("Edit", "Edit", new { id=device.Id }) |
                            @Html.ActionLink("Details", "Details", new { id=device.Id})  |
                            @Html.ActionLink("Delete", "Delete", new { id=device.Id }) 
                        </td> *@
                    </tr>
                }
        </tbody>
    </table>
</div>
